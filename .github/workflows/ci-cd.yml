name: CI/CD Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

permissions:
  pull-requests: read
  contents: read

jobs:
  install-dependencies:
    name: Install Dependencies
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies from requirements.txt
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        else
          pip install coverage rich requests pytest pytest-cov pytest-mock
        fi

    - name: Verify installations
      run: |
        python -c "import coverage; print(f'✓ coverage {coverage.__version__} installed')"
        python -c "import pytest; print('✓ pytest installed')"

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: install-dependencies
    strategy:
      matrix:
        test-type: [
          'unitarios_login', 
          'unitarios_cadastro', 
          'unitarios_exclusao', 
          'unitarios_editar',
          'unitario_pagamento',
          'unitario_pedidos_adicionar',
          'unitario_pedidos_fechar',
          'unitario_pedidos_remover_item',
          'unitario_pedidos_listar',
          'unitario_catalogo',
          'unitario_usuarios',
          'unitario_auth_manipulacao',
          'unitario_auth_loja',
          'unitario_arquivos',
          'unitario_menu',
          'unitario_loja'
        ]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        else
          pip install coverage rich requests pytest pytest-cov pytest-mock
        fi

    - name: Run ${{ matrix.test-type }} tests
      run: |
        echo "Running tests with marker: ${{ matrix.test-type }}"
        python -m pytest -m "${{ matrix.test-type }}" -v --cov=src --cov-report=xml --cov-report=html || echo "No tests found for this marker"

    - name: Rename and verify coverage files
      run: |
        echo "Files in current directory:"
        ls -la
        if [ -f .coverage ]; then
          mv .coverage .coverage.${{ matrix.test-type }}
          echo "Renamed .coverage to .coverage.${{ matrix.test-type }}"
        else
          echo "No .coverage file found for ${{ matrix.test-type }}, creating empty one"
          python -c "import coverage
cov = coverage.Coverage()
cov.start()
cov.stop()
cov.save()"
          mv .coverage .coverage.${{ matrix.test-type }}
        fi

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-${{ matrix.test-type }}
        path: |
          coverage.xml
          .coverage.${{ matrix.test-type }}
      if: always()

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: install-dependencies
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        else
          pip install coverage rich requests pytest pytest-cov pytest-mock
        fi

    - name: Run integration tests
      run: |
        python -m pytest -m "integracao" -v --cov=src --cov-report=xml --cov-report=html || echo "No integration tests found"

    - name: Rename and verify coverage files
      run: |
        if [ -f .coverage ]; then
          mv .coverage .coverage.integration
          echo "Renamed .coverage to .coverage.integration"
        else
          echo "No .coverage file found, creating empty one"
          python -c "import coverage
cov = coverage.Coverage()
cov.start()
cov.stop()
cov.save()"
          mv .coverage .coverage.integration
        fi

    - name: Upload integration coverage
      uses: actions/upload-artifact@v4
      with:
        name: coverage-integration
        path: |
          coverage.xml
          .coverage.integration
      if: always()

  all-tests:
    name: Run All Tests
    runs-on: ubuntu-latest
    needs: install-dependencies
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        else
          pip install coverage rich requests pytest pytest-cov pytest-mock
        fi

    - name: Run all tests
      run: |
        python -m pytest -v --cov=src --cov-report=xml --cov-report=html --junitxml=test-results.xml

    - name: Rename and verify coverage files
      run: |
        if [ -f .coverage ]; then
          mv .coverage .coverage.all
          echo "Renamed .coverage to .coverage.all"
        else
          echo "No .coverage file found, creating empty one"
          python -c "import coverage
cov = coverage.Coverage()
cov.start()
cov.stop()
cov.save()"
          mv .coverage .coverage.all
        fi

    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: test-results.xml

    - name: Upload coverage
      uses: actions/upload-artifact@v4
      with:
        name: coverage-all
        path: |
          coverage.xml
          .coverage.all

  combine-coverage:
    name: Combine Coverage
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, all-tests]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        else
          pip install coverage rich requests pytest pytest-cov pytest-mock
        fi

    - name: Download coverage reports
      uses: actions/download-artifact@v4
      with:
        path: coverage-reports

    - name: Find and collect all coverage files
      run: |
        echo "=== Searching for coverage files ==="
        
        # Create directory for all coverage files
        mkdir -p all-coverage-databases
        
        # Find all .coverage files in the downloaded artifacts
        find coverage-reports -name ".coverage*" -exec cp {} all-coverage-databases/ \; 2>/dev/null || true
        
        # List what we found
        echo "Found coverage files:"
        ls -la all-coverage-databases/ || echo "No coverage files found yet"
        
        # If no files found, create a minimal one to avoid errors
        if [ -z "$(ls -A all-coverage-databases/ 2>/dev/null)" ]; then
          echo "No coverage files found, creating minimal coverage database"
          python -c "import coverage
cov = coverage.Coverage()
cov.start()
x = 'test'
y = len(x)
cov.stop()
cov.save()"
          cp .coverage all-coverage-databases/coverage.minimal
        fi
        
        # Copy all files to current directory with unique names
        count=1
        for file in all-coverage-databases/.coverage*; do
          if [ -f "$file" ]; then
            new_name="coverage_db_${count}"
            cp "$file" "$new_name"
            echo "Copied: $file -> $new_name"
            count=$((count + 1))
          fi
        done
        
        echo "Final files to combine:"
        ls -la coverage_db_* 2>/dev/null || ls -la

    - name: Combine coverage databases
      run: |
        echo "=== Combining coverage ==="
        
        # Try to combine any coverage files found
        if ls coverage_db_* 1> /dev/null 2>&1; then
          echo "Combining coverage database files..."
          python -m coverage combine coverage_db_*
        elif ls .coverage* 1> /dev/null 2>&1; then
          echo "Combining .coverage files..."
          python -m coverage combine .coverage*
        else
          echo "No coverage files found, creating new coverage..."
          python -c "import coverage
cov = coverage.Coverage()
cov.start()
result = 1 + 1
cov.stop()
cov.save()"
        fi
        
        # Generate reports
        echo "Generating coverage reports..."
        python -m coverage xml -o combined-coverage.xml
        python -m coverage html -d coverage-html
        echo "Coverage report:"
        python -m coverage report

    - name: Upload combined coverage
      uses: actions/upload-artifact@v4
      with:
        name: combined-coverage
        path: |
          combined-coverage.xml
          .coverage
          coverage-html/

  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: combine-coverage
    if: success() && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        else
          pip install coverage
        fi

    - name: Download combined coverage
      uses: actions/download-artifact@v4
      with:
        name: combined-coverage
        path: .

    - name: Verify combined coverage file
      run: |
        if [ -f combined-coverage.xml ]; then
          echo "✓ Combined coverage file found"
          ls -la combined-coverage.xml
        else
          echo "⚠ Combined coverage file not found, creating minimal one"
          python -c "import coverage
cov = coverage.Coverage()
cov.start()
x = 'sonarqube'
cov.stop()
cov.xml_report(outfile='combined-coverage.xml')"
        fi

    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v4
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      with:
        args: >
          -Dsonar.projectKey=loja
          -Dsonar.projectName=Loja
          -Dsonar.python.coverage.reportPaths=combined-coverage.xml
          -Dsonar.sources=src
          -Dsonar.tests=tests
          -Dsonar.sourceEncoding=UTF-8
          -Dsonar.python.version=3.12

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [all-tests, sonarqube]
    if: success() && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        else
          pip install coverage rich requests
        fi

    - name: Deploy success message
      run: |
        echo "✅ All tests passed! Ready for deployment."
        echo "📊 Coverage reports generated successfully"
        echo "🚀 Application can be deployed"
