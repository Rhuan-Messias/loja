name: CI/CD Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

permissions:
  pull-requests: read
  contents: read

jobs:
  install-dependencies:
    name: Install Dependencies
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install core dependencies
      run: |
        python -m pip install --upgrade pip
        pip install rich requests pytest pytest-cov pytest-mock

    - name: Install from requirements.txt if exists
      run: |
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Verify installations
      run: |
        python -c "import rich; print('✓ rich installed')"
        python -c "import requests; print('✓ requests installed')"
        python -c "import pytest; print('✓ pytest installed')"

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: install-dependencies
    strategy:
      matrix:
        test-type: [
          'unitarios_login', 
          'unitarios_cadastro', 
          'unitarios_exclusao', 
          'unitarios_editar',
          'unitario_pagamento',
          'unitario_pedidos_adicionar',
          'unitario_pedidos_fechar',
          'unitario_pedidos_remover_item',
          'unitario_pedidos_listar',
          'unitario_catalogo',
          'unitario_usuarios',
          'unitario_auth_manipulacao',
          'unitario_auth_loja',
          'unitario_arquivos',
          'unitario_menu',
          'unitario_loja'
        ]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install rich requests pytest pytest-cov pytest-mock
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Run ${{ matrix.test-type }} tests
      run: |
        echo "Running tests with marker: ${{ matrix.test-type }}"
        python -m pytest -m "${{ matrix.test-type }}" -v --cov=src --cov-report=xml || echo "No tests found for this marker"

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-${{ matrix.test-type }}
        path: coverage.xml
      if: always()

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: install-dependencies
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install rich requests pytest pytest-cov pytest-mock
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Run integration tests
      run: |
        python -m pytest -m "integracao" -v --cov=src --cov-report=xml || echo "No integration tests found"

    - name: Upload integration coverage
      uses: actions/upload-artifact@v4
      with:
        name: coverage-integration
        path: coverage.xml
      if: always()

  all-tests:
    name: Run All Tests
    runs-on: ubuntu-latest
    needs: install-dependencies
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install rich requests pytest pytest-cov pytest-mock
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Run all tests
      run: |
        python -m pytest -v --cov=src --cov-report=xml --junitxml=test-results.xml

    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: test-results.xml

    - name: Upload coverage
      uses: actions/upload-artifact@v4
      with:
        name: coverage-all
        path: coverage.xml

  combine-coverage:
    name: Combine Coverage
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, all-tests]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install coverage
      run: |
        pip install coverage

    - name: Download coverage reports
      uses: actions/download-artifact@v4
      with:
        path: coverage-reports

    - name: Combine coverage
      run: |
        python -m coverage combine coverage-reports/coverage-*/coverage.xml coverage-reports/coverage-all/coverage.xml
        python -m coverage xml -o combined-coverage.xml
        python -m coverage report

    - name: Upload combined coverage
      uses: actions/upload-artifact@v4
      with:
        name: combined-coverage
        path: combined-coverage.xml

  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: combine-coverage
    if: success() && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Download combined coverage
      uses: actions/download-artifact@v4
      with:
        name: combined-coverage
        path: .

    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v4
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      with:
        args: >
          -Dsonar.projectKey=loja
          -Dsonar.projectName=Loja
          -Dsonar.python.coverage.reportPaths=combined-coverage.xml
          -Dsonar.sources=src
          -Dsonar.tests=tests
          -Dsonar.sourceEncoding=UTF-8

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [all-tests, sonarqube]
    if: success() && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy success message
      run: |
        echo "✅ All tests passed! Ready for deployment."
